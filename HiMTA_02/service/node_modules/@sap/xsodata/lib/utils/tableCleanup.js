'use strict';

var dataCollector = require('./../sql/dataCollector');

/**
 * Assert existing temp table statements. If there are still existing temp table
 * statements we have to clean up the session before we exist.
 *
 * @param {Object} context The odata context
 * @param {Next} next The callback to be called when finish processing
 */
exports.assertCleanTempTables = function assertCleanTempTables(context, next) {
    var statements, statementStr;

    context.logger.info('xsodata', 'assertCleanTempTables');

    statements = context.networkContext.cleanSessionTruncateContainer
        .concat(context.networkContext.cleanSessionDropContainer);

    if (statements.length > 0) {

        statementStr = JSON.stringify(statements, null, 2);
        context.logger.info('xsodata', 'assertCleanTempTables - remaining temp tables found: ' + statementStr);
        context.logger.info('xsodata', 'assertCleanTempTables - starting clean up remaining temp tables');

        dataCollector.execTempTableStatements(statements, context, function done(err) {
            if (err) {
                 context.logger.silly('assertCleanTempTables', 'execTempTableStatements rc !=0 but OK');
            }
            next(null, context);
        });
    } else {
        next(null, context);
    }

};

exports.emptyLists = (context) => {
    context.networkContext.cleanSessionTruncateContainer = [];
    context.networkContext.cleanSessionDropContainer = [];
};
