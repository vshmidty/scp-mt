"use strict";

var BadRequestError = require("../utils/errors/http/badRequest");

var xsenv = require('@sap/xsenv');
var xssec = require("@sap/xssec");

/**
 * Validates and extracts the authorization token from OData context without prefixes.
 * According to RFC-6750, the HTTP request's authorization header must look like:
 *      "Bearer <JWT-Token>".
 * @param context {Object} The OData context of the framework.
 * @returns {string} "<JWT-Token>".
 */
exports.getAuthToken = function getAuthToken (context) {

    var authorizationHeader = context.request.headers.Authorization ||
            context.request.headers.authorization,
        token;

    if (!authorizationHeader) {
        throw new BadRequestError("Missing Authorization request header", context);
    }

    // There can be only one space in "Bearer <JWT-Token>"
    token = authorizationHeader.split(" ");
    if (token.length !==2 || token[0] !== "Bearer") {
        throw new BadRequestError("Bad Authorization request header", context);
    }

    return token[1];
};


/**
 * Checks the collected scopes against the given token. It uses the xssec module to check the scopes
 * one by one. A scope name must be given in the xsodata corresponding file WITHOUT the app name, because
 * checkLocalScope appends the app name automatically.
 * @param token {string} Authorization token extracted from the HTTP header.
 * @param scopes {Array<String>} Collection of scopes from all strategies.
 * @param callback {Function} Callback to be called when scopes checks are done.
 */
exports.checkScopes = function checkScopes (token, scopes, callback) {

    // The UAA service is read (using xsenv module) from the default-services.json file at root-dir
    var uaaService = xsenv.getServices({ uaa: {tag:'xsuaa'} }).uaa || xsenv.getServices({ uaa: 'uaa' }).uaa;

    xssec.createSecurityContext(token, uaaService, function (err, externelSecurityContext) {

        if (err) {
            return callback(err, null);
        }

        var isAuthorized = true;
        scopes.forEach(function (scope) {
            if (externelSecurityContext.checkLocalScope(scope) !== true) {
                isAuthorized = false;
            }
        });
        callback(null, isAuthorized);
    });

};
