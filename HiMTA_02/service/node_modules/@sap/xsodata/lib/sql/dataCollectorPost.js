'use strict';

//Include
const dataCollector = require('./dataCollector');
const sqlStatement = require('./sqlStatement');
const utils = require('../utils/utils');
const SqlError = require('../utils/errors/sqlError');

exports.moveRecordNV_ToSelectStm = function (context, asyncDone) {
    context.logger.silly('dataCollectorPost', 'moveRecordNV_ToSelectStm');
    //get dbSegment for inserting the payload
    var dbSeg = context.oData.dbSegmentLast;

    var stm = dbSeg.sql.stmContainer.insertTmp;
    if (!stm) {
        return asyncDone("Internal server error", context);
    }

    var max = dbSeg._recordNV.length;
    var i;
    for (i = 0; i < max; i++) {
        var nv = dbSeg._recordNV[i];
        stm.setValue(nv.name, nv.value);
    }
    return asyncDone(null, context);
};


exports.createTmpTables = function (context, asyncDone) {
    context.logger.silly('dataCollectorPost', 'createTmpTables');
    var dbSeg = context.oData.dbSegmentLast;
    var stm = dbSeg.sql.stmContainer.createTmp;
    return dataCollector.execParallelNoResult([stm], context, asyncDone);
};

exports.checkAutoValues = null;

exports.checkForAutoKeyGenUsage = function (context, asyncDone) {
    context.logger.silly('dataCollectorPost', 'checkForAutoKeyGenUsage');

    var dbSeg = context.oData.dbSegmentLast;
    if (!exports.checkAutoValues && !dbSeg.entityType.hasAdmindata()) {
        return asyncDone(null, context);
    }


    var stm = dbSeg.sql.stmContainer.insertTmp;

    var table = dbSeg._DB_TableName;

    var appData = {};
    var i;
    var nv = stm.nv;
    var name = '';

    const createBy = dbSeg.entityType.getAddAdmindata('create', 'by');
    const createAt = dbSeg.entityType.getAddAdmindata('create', 'at');
    const modifyBy = dbSeg.entityType.getAddAdmindata('modify', 'by');
    const modifyAt = dbSeg.entityType.getAddAdmindata('modify', 'at');


    for (i = 0; i < nv.length; i++) {

        name = nv[i].name.toSqlHana(null, null, true);
        name = name.substr(1, name.length - 2);

        if (createBy && name === 'CREATED_BY') {
            nv[i].overwriteValue = new sqlStatement.Value(context.userName);
        }
        if (createAt && name === 'CREATED_AT') {
            nv[i].formula = 'NOW()';
        }
        if (modifyBy && name === 'MODIFIED_BY') {
            nv[i].overwriteValue = new sqlStatement.Value(context.userName);
        }
        if (modifyAt && name === 'MODIFIED_AT') {
            nv[i].formula = 'NOW()';
        }


        // build application api structure

        appData[name] = {
            value: nv[i].value,
            sequence: null
        };
    }

    if (!exports.checkAutoValues) {
        return asyncDone(null, context);
    }

    return exports.checkAutoValues(table, appData, function (err) {
        var name;
        for (i = 0; i < nv.length; i++) {
            name = nv[i].name.toSqlHana(null, null, true);
            name = name.substr(1, name.length - 2);
            if (appData[name].sequence) {
                nv[i].sequence = appData[name].sequence;
            }
        }
        return asyncDone(err, context);
    });
};

exports.insertPayloadIntoTempTable = function (context, asyncDone) {
    context.logger.silly('dataCollectorPost', 'insertPayloadIntoTempTable');
    var client = context.db.client;
    var dbSeg = context.oData.dbSegmentLast;
    var stm = dbSeg.sql.stmContainer.insertTmp;

    var p = [];
    var sql = stm.toSqlHana(new sqlStatement.SqlBuildHanaContext(context), p);
    context.logger.debug('SQL Exec', 'SQL: \n' + sql);
    client.prepare(sql, function (err, statement) {
        if (err) {
            context.logger.info('SQL Exec', 'Error: \n' + err);
            context.logger.info('SQL Exec', 'SQL: \n' + sql);
            return asyncDone(new SqlError(context, err), context);
        }

        context.logger.debug('SQL Exec', 'Parameters:\n' + JSON.stringify(p));
        statement.exec(p, function (err/*, rows*/) {
            if (err) {
                context.logger.info('SQL Exec', 'Error: \n' + err);
                context.logger.info('SQL Exec', 'SQL: \n' + sql);
                context.logger.info('SQL Exec', 'Parameters:\n' + JSON.stringify(p));
                return asyncDone(new SqlError(context, err), context);
            }

            return asyncDone(null, context);
        });
    });
};

exports.insertTmpTableToRealTable = function (context, asyncDone) {
    context.logger.silly('dataCollectorPost', 'insertToRealTable');
    var client = context.db.client;
    var dbSeg = context.oData.dbSegmentLast;
    var stm = dbSeg.sql.stmContainer.insertReal;

    var p = [];
    var sql = stm.toSqlHana(new sqlStatement.SqlBuildHanaContext(context), p);
    context.logger.debug('SQL Exec', 'SQL: \n' + sql);
    client.prepare(sql, function (err, statement) {
        if (err) {
            context.logger.info('SQL Exec', 'Error: \n' + err);
            context.logger.info('SQL Exec', 'SQL: \n' + sql);
            return asyncDone(new SqlError(context, err), context);
        }

        context.logger.debug('SQL Exec', 'Parameters:\n' + JSON.stringify(p));
        statement.exec(p, function (err/*, rows*/) {
            if (err) {
                context.logger.info('SQL Exec', 'Error: \n' + err);
                context.logger.info('SQL Exec', 'SQL: \n' + sql);
                context.logger.info('SQL Exec', 'Parameters:\n' + JSON.stringify(p));
                return asyncDone(new SqlError(context, err), context);
            }
            return asyncDone(null, context);
        });
    });
};

exports.selectData = function (context, asyncDone) {
    context.logger.silly('dataCollectorPost', 'selectData');
    var client = context.db.client;
    var dbSeg = context.oData.dbSegmentLast;
    var stm = dbSeg.sql.stmContainer.select;

    var p = [];

    var sql = stm.toSqlHana(new sqlStatement.SqlBuildHanaContext(context), p);

    context.logger.debug('SQL Exec', 'SQL: \n' + sql);
    client.prepare(sql, function (err, statement) {
        if (err) {
            context.logger.info('SQL Exec', 'Error: \n' + err);
            context.logger.info('SQL Exec', 'SQL: \n' + sql);
            return asyncDone(new SqlError(context, err), context);
        }

        context.logger.debug('SQL Exec', 'Parameters:\n' + JSON.stringify(p));
        statement.exec(p, function (err, rows) {
            if (err) {
                context.logger.info('SQL Exec', 'Error: \n' + err);
                context.logger.info('SQL Exec', 'SQL: \n' + sql);
                context.logger.info('SQL Exec', 'Parameters:\n' + JSON.stringify(p));
                return asyncDone(new SqlError(context, err), context);
            }
            dbSeg.sql.rows = rows;

            if (rows.length === 1 && utils.isETagHeaderRequired(context, dbSeg)) {
                dbSeg.etagHeader = rows[0].__etag;
            }

            context.logger.silly('selectData', 'rows: ' + JSON.stringify(rows.length));
            context.logger.silly('selectData', 'rows: ' + JSON.stringify(rows, null, 2));

            return asyncDone(null, context);
        });
    });
};


exports.commit = function (context, asyncDone) {
    context.logger.silly('dataCollectorPost', 'commit');
    var client = context.db.client;
    client.commit(function (err) {
        if (err) {
            context.logger.info('SQL Exec', 'Commit Error: \n' + err);
            return asyncDone(err, context);
        }
        return asyncDone(null, context);
    });
};

/**
 * Executes truncation of temporary created tables
 *
 * @param {Object} context The xsodata context
 * @param {Function} asyncDone async waterfall callback
 */
exports.truncateTempTables = function (context, asyncDone) {
    var statements;
    context.logger.silly('dataCollectorPost', 'truncateTempTables');

    statements = [context.sql.container.createTmpTruncate];

    return dataCollector.execTempTableStatements(statements, context, (err, context) => {
        if (err) {
            context.logger.silly('dataCollectorPost', 'truncateTempTables rc !=0 but OK');
        }
        return asyncDone(null, context);
    });
};

/**
 * Executes deletion of temporary created tables
 *
 * @param {Object} context The xsodata context
 * @param {Function} asyncDone async waterfall callback
 */
exports.dropTempTables = function (context, asyncDone) {
    var statements;
    context.logger.silly('dataCollectorPost', 'dropTempTables');

    statements = [context.sql.container.createTmpDrop];

    return dataCollector.execTempTableStatements(statements, context, (err, context) => {
        if (err) {
            context.logger.silly('dataCollectorPost', 'dropTempTables rc !=0 but OK');
        }
        return asyncDone(null, context);
    });
};



