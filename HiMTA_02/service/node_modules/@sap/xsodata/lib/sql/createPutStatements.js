'use strict';

//Include
const sql = require('./sqlStatement');
const sqlTools = require('./sqlTools');
const utils = require('../utils/utils');

//Code
exports.createPutStatementsCreateTmpTables = function (context, asyncDone) {
    context.logger.silly('createPutStatements', 'createPutStatementsCreateTmpTables');

    const dbSegLast = context.oData.dbSegmentLast;

    const sqlContext = {
        context: context,
        netId: context.uniqueNetworkRequestID,
        reqId: context.uniqueRequestID,
        rId: 1,
        dbSegLast: dbSegLast,
        systemQueryParameters: context.oData.systemQueryParameters
    };
    context.sql = sqlContext;

    // set context.sql.container to be able to use dataCollectorGet to execute SELECT queries
    context.sql.container = dbSegLast.sql.stmContainer = new sql.PutContainer();

    startPutMasterDbSegCreate(sqlContext);
    return asyncDone(null, context);
};

exports.createPutStatementsInsert = function (context, asyncDone) {
    context.logger.silly('createPutStatements', 'createPutStatementsInsert');

    const sqlContext = context.sql;

    startPutMasterDbSegInsert(sqlContext);
    return asyncDone(null, context);
};

/**
 * Create SQL statements for the master table (=end of resource path)
 * @param sqlContext
 */
function startPutMasterDbSegCreate(sqlContext) {
    sqlContext.context.logger.debug('createPutStatements', 'startPutMasterDbSegCreate');

    const dbSeg = sqlContext.dbSegLast;
    const stmtContainer = dbSeg.sql.stmContainer;

    dbSeg.sql.rIdNew = sqlTools.rIdToNewTableName(dbSeg._Alias, sqlContext.netId, sqlContext.reqId, sqlContext.rId++);
    dbSeg.sql.rIdOld = sqlTools.rIdToOldTableName(dbSeg._Alias, sqlContext.netId, sqlContext.reqId, sqlContext.rId++);

    //create statement for master table
    stmtContainer.createTmp = masterTableCreate(sqlContext, dbSeg.sql.rIdNew);

    stmtContainer.createTmpOld = masterTableCreate(sqlContext, dbSeg.sql.rIdOld);

    if (sqlContext.context.db.isExternalHandledConnection === true) {
        // We only truncate and delete temp tables when db connection is handled external
        // otherwise we will self disconnect and temp tables will be deleted automatically

        // build the truncate statement for created temporary table;
        stmtContainer.createTmpTruncate = sql.buildTableStatement(sql.Truncate, sqlContext, stmtContainer.createTmp.table);

        stmtContainer.createTmpOldTruncate = sql.buildTableStatement(sql.Truncate, sqlContext, stmtContainer.createTmpOld.table);

        // build the drop statement for created temporary table;
        stmtContainer.createTmpDrop = sql.buildTableStatement(sql.Drop, sqlContext, stmtContainer.createTmp.table);

        stmtContainer.createTmpOldDrop = sql.buildTableStatement(sql.Drop, sqlContext, stmtContainer.createTmpOld.table);
    }
}

/**
 * Create SQL statements for the master table (=end of resource path)
 * @param sqlContext
 */
function startPutMasterDbSegInsert(sqlContext) {
    sqlContext.context.logger.debug('createPutStatements', 'startPutMasterDbSegInsert');

    const dbSeg = sqlContext.dbSegLast;
    const stmtContainer = dbSeg.sql.stmContainer;

    let selectETagStmt;

    //create insert statement for master table
    stmtContainer.insertTmp = masterTableInsertToNew(sqlContext, dbSeg.sql.rIdNew);

    //create statement to insert created data into new temp table
    //stmtContainer.updateTmpCreateInfo = masterTableUpdateCreateInfoInNewTmpTable(sqlContext, dbSeg.sql.rIdNew);

    //create insert statement for master table
    stmtContainer.insertTmpOld = masterTableInsertToOld(sqlContext, dbSeg.sql.rIdOld);

    //create update statement for master table
    stmtContainer.updateReal = masterTableUpdate(sqlContext, dbSeg.sql.rIdNew);


    // adjust stmtContainer to be able to use dataCollectorGet to execute the SELECT statement for the ETag
    stmtContainer.selectFromTmp = masterTableSelect(sqlContext, dbSeg.sql.rIdNew);
    stmtContainer.selectCreateInfoFromTmpOld = createSqlForSelectCreateInfoFromTmpOld(sqlContext, dbSeg.sql.rIdOld);
    stmtContainer.select = [];
    stmtContainer.selectTmp = [];

    if (utils.isETagRequired(sqlContext.context, dbSeg)) {
        //create select statement to generate ETag for the updated entity
        selectETagStmt = sql.createSelectStmtForETag(dbSeg);
        stmtContainer.select.push({ stm: selectETagStmt, dbSeg: dbSeg });
    }
}

function masterTableCreate(sqlContext, rId) {
    sqlContext.context.logger.debug('createPostStatements', 'masterTableCreate');

    const dbSeg = sqlContext.dbSegLast;
    const stmCreate = new sql.Create();

    stmCreate.setModifiers(['local', 'temporary', dbSeg.entityType.tableStoreType]);
    stmCreate.setTableName(rId);

    stmCreate.addProperties(dbSeg.getPropertiesForCreate());
    if (dbSeg._ExpandedNavigations.length > 0) {
        stmCreate.addProperties(dbSeg.getNavPropertiesForCreate());
    }
    return stmCreate;
}
/*
function masterTableCreateOld(sqlContext, rId) {
    sqlContext.context.logger.debug('createPutStatements', 'masterTableCreate');

    const dbSeg = sqlContext.dbSegLast;
    const stmCreate = new sql.Create();

    stmCreate.setModifiers(['local', 'temporary', dbSeg.entityType.tableStoreType]);
    stmCreate.setTableName(rId);
    stmCreate.setAs(createSelectTemplate(dbSeg));
    stmCreate.setPostModifiers(['with no data']);
    return stmCreate;



    function createSelectTemplate(dbSeg) {
        const stm = new sql.Select();

        //SELECT
        stm.addSelects(dbSeg.getQKeyProperties());
        if (dbSeg._ExpandedNavigations.length > 0) {
            stm.addSelects(dbSeg.getNonKeyNonSelectedProperties4Expansion());
        }
        stm.addSelects(dbSeg.getQNonKeyProperties());

        //FROM
        stm.setFrom(dbSeg.getAliasedTableName());
        return stm;
    }
}*/

function masterTableInsertToNew(sqlContext, rId) {
    sqlContext.context.logger.debug('createPutStatements', 'masterTableInsertToNew');

    const dbSeg = sqlContext.dbSegLast;
    const stm = new sql.Insert();

    stm.setTableName({ table: rId });
    //SELECT
    stm.addNames(dbSeg.getQKeyProperties());
    stm.addNames(dbSeg.getQNonKeyProperties());

    //the data is inserted later on
    return stm;

}

function masterTableInsertToOld(sqlContext, rId) {
    sqlContext.context.logger.debug('createPutStatements', 'masterTableInsertToNew');

    const dbSeg = sqlContext.dbSegLast;
    const subSelect = new sql.Select();

    subSelect.addSelects(dbSeg.getQKeyPropertiesForSelect());
    subSelect.addSelects(dbSeg.getQNonKeyPropertiesForSelect());
    subSelect.setFrom(dbSeg.getAliasedTableName());
    subSelect.addWhereKeyValuePairs(dbSeg.getQKeyWithValuesDB());

    const stm = new sql.Insert();
    stm.setTableName({ table: rId });
    stm.setSubSelect(subSelect);

    return stm;
}

/**
 * Create select SQL statement for master table
 * @param sqlContext
 * @param rId
 * @returns {exports.Select}
 */
/*
function masterTableUpdateCreateInfoInNewTmpTable(sqlContext, rId) {
    sqlContext.context.logger.debug('createPutStatements', 'masterTableUpdate');
    const dbSeg = sqlContext.dbSegLast;
    const createBy = dbSeg.entityType.getAddAdmindata('create', 'by');
    const createAt = dbSeg.entityType.getAddAdmindata('create', 'at');


    const update = new sql.Update();
    update.setTable({
        schema: dbSeg._DB_Schema,
        table: dbSeg.sql.rIdNew,
        alias: 'TMP_NEW'
    }); //overwrite alias

    //update.addSetCopyProperties(dbSeg.getQKeyProperties(), 'TEMP');
    const copyPropertiesOrig = dbSeg.getQNonKeyProperties();
    const copyProperties = [];

    for (const prop of copyPropertiesOrig) {
        if ((createBy && prop.property === 'CREATED_BY') ||
            (createAt && prop.property === 'CREATED_AT')) {
            copyProperties.push(prop);
        }
    }

    update.addSetCopyProperties(copyProperties, 'TEMP_OLD');

    update.setFrom({
        table: dbSeg.sql.rIdOld,
        alias: 'TEMP_OLD'
    });
    update.addWhereKeyValuePairs(dbSeg.getQKeyWithValues('TEMP_NEW'));

    return update;
}*/


/**
 * Create select SQL statement for master table
 * @param sqlContext
 * @param rId
 * @returns {exports.Select}
 */
function masterTableUpdate(sqlContext, rId) {
    sqlContext.context.logger.debug('createPutStatements', 'masterTableUpdate');
    const dbSeg = sqlContext.dbSegLast;
    const createBy = dbSeg.entityType.getAddAdmindata('create', 'by');
    const createAt = dbSeg.entityType.getAddAdmindata('create', 'at');


    const update = new sql.Update();
    update.setTable(dbSeg.getAliasedTableName('PERM')); //overwrite alias

    //update.addSetCopyProperties(dbSeg.getQKeyProperties(), 'TEMP');
    const copyPropertiesOrig = dbSeg.getQNonKeyProperties();
    const copyProperties = [];

    for (const prop of copyPropertiesOrig) {
        if (!((createBy && prop.property === 'CREATED_BY') ||
                (createAt && prop.property === 'CREATED_AT'))) {
            copyProperties.push(prop);
        }
    }

    update.addSetCopyProperties(copyProperties, 'TEMP');

    update.setFrom({
        table: rId,
        alias: 'TEMP'
    });
    update.addWhereKeyValuePairs(dbSeg.getQKeyWithValues('PERM'));

    return update;
}

/**
 * Create select SQL statement to select from tmp table
 * Since a application exit may be used to do the insert into the real table
 * and possible create a custom key, we can't select with the client-key from the real table
 * so in this case the application has the possiblity to pass the new key back to the client.
 * @param sqlContext
 * @param rId
 * @returns {exports.Select}
 */
function masterTableSelect(sqlContext, rId) {
    sqlContext.context.logger.debug('createPutStatements', 'masterTableSelect');

    const dbSeg = sqlContext.dbSegLast;
    const stmSelect = new sql.Select();

    stmSelect.addSelect(dbSeg.getQKeyPropertiesWith0123AliasForSelect(true));
    stmSelect.addSelects(dbSeg.getPropertiesForSelect(true));
    if (dbSeg._ExpandedNavigations.length > 0) {
        stmSelect.addSelects(dbSeg.getNavPropertiesForSelect(true));
    }

    if (utils.isETagRequired(sqlContext.context, dbSeg)) {
        sql._addETagToSelect(dbSeg, stmSelect, rId);
    }

    stmSelect.setFrom({ schema: null, table: rId, alias: null });
    return stmSelect;
}

function createSqlForSelectCreateInfoFromTmpOld(sqlContext, rId) {
    sqlContext.context.logger.debug('createPutStatements', 'createInfoFromTmpOld');

    const dbSeg = sqlContext.dbSegLast;
    const createBy = dbSeg.entityType.getAddAdmindata('create', 'by');
    const createAt = dbSeg.entityType.getAddAdmindata('create', 'at');

    const stmSelect = new sql.Select();

    const formulas = [];
    if (createBy) {
        formulas.push(new sql.SelectFormula(null, 'CREATED_BY'));
    }
    if (createAt) {
        formulas.push(new sql.SelectFormula(null, 'CREATED_AT'));
    }

    stmSelect.addSelects(formulas);

    stmSelect.setFrom({ schema: null, table: rId, alias: null });
    return stmSelect;
}
