'use strict';

//Include
var dataCollector = require('./dataCollector');


exports.createTmpTables = function (context, asyncDone) {
    context.logger.silly('dataCollectorDelete', 'createTmpTables');
    var dbSeg = context.oData.dbSegmentLast;
    var stm = dbSeg.sql.stmContainer.createTmpDel;
    return dataCollector.execParallelNoResult([stm], context, asyncDone);
};


exports.insertDataToDelTable = function (context, asyncDone) {
    context.logger.silly('dataCollectorDelete', 'insertDataToDelTable');
    var dbSeg = context.oData.dbSegmentLast;
    return dataCollector.execParallelNoResultwithParam([dbSeg.sql.stmContainer.insertTmpDel], context, asyncDone, true);
};


exports.deleteTable = function (context, asyncDone) {
    context.logger.silly('dataCollectorDelete', 'deleteTable');
    var dbSeg = context.oData.dbSegmentLast;
    return dataCollector.execParallelNoResultwithParam([dbSeg.sql.stmContainer.delete], context, asyncDone);
};


exports.commit = function (context, asyncDone) {
    context.logger.silly('dataCollectorDelete', 'commit');
    var client = context.db.client;
    client.commit(function (err) {
        if (err) {
            context.logger.info('SQL Exec', 'Commit Error: \n' + err);
            return asyncDone(err, context);
        }
        return asyncDone(null, context);
    });
};

/**
 * Executes truncation of temporary created tables
 *
 * @param {Object} context The xsodata context
 * @param {Function} asyncDone async waterfall callback
 */
exports.truncateTempTables = function (context, asyncDone) {
    var statements;
    context.logger.silly('dataCollectorDelete', 'truncateTempTables');

    statements = [context.sql.container.createTmpDelTruncate];
    return dataCollector.execTempTableStatements(statements, context, (err, context) => {
        if (err) {
            context.logger.silly('dataCollectorDelete', 'truncateTempTables rc !=0 but OK');
        }
        return asyncDone(null, context);
    });
};

/**
 * Executes deletion of temporary created tables
 *
 * @param {Object} context The xsodata context
 * @param {Function} asyncDone async waterfall callback
 */
exports.dropTempTables = function (context, asyncDone) {
    var statements;
    context.logger.silly('dataCollectorDelete', 'dropTempTables');

    statements = [context.sql.container.createTmpDelDrop];
    return dataCollector.execTempTableStatements(statements, context, (err, context) => {
        if (err) {
            context.logger.silly('dataCollectorDelete', 'dropTempTables rc !=0 but OK');
        }
        return asyncDone(null, context);
    });
};

