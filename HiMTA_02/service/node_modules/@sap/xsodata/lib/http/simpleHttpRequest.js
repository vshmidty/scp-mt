"use strict";

var _ = require('lodash');
var utils = require('./../utils/utils');
var bodyParser = require('body-parser');
var BadRequest = require('./../utils/errors/http/badRequest');

module.exports.createRequest = function (originalRequest, uriPrefix) {
    var request = {
        headers: {}
    };

    if (originalRequest) {
        request = {
            httpVersion: originalRequest.httpVersion,
            headers: utils.clone(originalRequest.headers),
            method: originalRequest.method,
            url: originalRequest.url,
            urlData: createUrlData(originalRequest),
            baseUrl: uriPrefix || originalRequest.baseUrl || ''
        };
    }

    //Express JS handling
    if (originalRequest.body) {
        request.body = originalRequest.body;
    }

    request.getBodyAsString = function (cb) {
        if (request.body) {
            if (request.body instanceof  Buffer) {
                return cb(request.body.toString('utf8'));
            } else {
                return cb(request.body);
            }
        } else if (originalRequest.body) {
            return cb(originalRequest.body);
        } else {
            var parser = bodyParser.raw({type: '*/*'});

            parser(originalRequest, null, function next(err) {
                if (err) {
                    throw new BadRequest('Error while parsing http content',null,err);
                }
                var body = originalRequest.body;
                return cb(body.toString('utf8'));
            });

        }
    };

    return request;
};

module.exports.createRequestFromAppHttp = function (appHttp, options) {
    var request;
    var appData = appHttp.rawData;

    var s = appData.url.split(' ');
    var method = s[0];
    var uri = s[1];
    var version = s[2];

    var body = appData.payload.join('\r\n');

    if (uri.substr(0, 1) !== '/') {
        uri = '/' + uri;
    }

    request = {
        httpVersion: version,
        headers: utils.clone(appData.headers),
        method: method,
        url: uri,
        body: body
    };

    request.urlData = createUrlData(request);

    if (options) {
        _.assign(request, options);
    }

    request.getBodyAsString = function (cb) {
        return cb(request.body);
    };

    return request;
};

function createUrlData(request){
    var protocol = request.connection && request.connection.encrypted ? 'https' : 'http';

    return {
        host: request.headers['x-forwarded-host'] || request.headers.host,
        proto: request.headers['x-forwarded-proto'] || request.protocol || protocol,
        path: request.headers['x-forwarded-path'] || request.url,
        forwarded: !!request.headers['x-forwarded-path'],
        baseUrl: request.baseUrl
    };
}


