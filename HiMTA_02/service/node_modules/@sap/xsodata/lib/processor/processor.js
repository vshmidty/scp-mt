'use strict';

var odataUri = require('./../uri/oDataUriParser');

var serviceProcessor = require('./../serializer/serviceSerializer');
var metadataProcessor = require('./../serializer/metadataSerializer');
var batchProcessor = require('./../processor/batchProcessor');
var resourceProcessor = require('./resourceProcessor');
var batchRunState = require('./../utils/batch/batchConst').runState;

var Measurement = require('./../utils/measurement');

exports.processRequest = function (context, asyncDone) {
    try {
        context.logger.silly("processor", "processRequest");

        var oData = context.oData;

        if (oData.kind === odataUri.URI_KIND_Service) {
            Measurement.measureWithCB(serviceProcessor.process, context, asyncDone, 'serviceProcessor.process');
        } else if (oData.kind === odataUri.URI_KIND_MetaData) {
            Measurement.measureWithCB(metadataProcessor.process, context, asyncDone, 'metadataProcessor.process');
        } else if (oData.kind === odataUri.URI_KIND_Batch) {
            Measurement.measureWithCB(batchProcessor.process, context, asyncDone, 'batchProcessor.process');
        } else if (oData.kind === odataUri.URI_KIND_Resource) {

            if (!context.batchContext) {
                //normal no batch request processing
                Measurement.measureWithCB(resourceProcessor.process, context, asyncDone, 'resourceProcessor.process');
            } else {
                var batchContext = context.batchContext;
                if (batchContext.status === batchRunState.createTables) {
                    Measurement.measureWithCB(resourceProcessor.processInBatchCreateTables, context, asyncDone, 'processInBatchCreateTables');
                }else if (batchContext.status === batchRunState.execution) {
                    Measurement.measureWithCB(resourceProcessor.processInBatch, context, asyncDone, 'processInBatch');
                }else if (batchContext.status === batchRunState.preCommitRun) {
                    Measurement.measureWithCB(resourceProcessor.processInBatchPreCommitRun, context, asyncDone, 'processInBatchPreCommitRun');
                } else if (batchContext.status === batchRunState.postCommitRun) {
                    Measurement.measureWithCB(resourceProcessor.processInBatchPostCommitRun, context, asyncDone, 'processInBatchPostCommitRun');
                }
            }

        }
    }
    catch (ex) {
        return asyncDone(ex);
    }
};
