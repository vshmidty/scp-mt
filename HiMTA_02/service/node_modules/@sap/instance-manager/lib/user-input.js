'use strict';

var clone = require('clone');
var format = require('util').format;
var MANDATORY_OPTIONS = require('./constants').MANDATORY_OPTIONS;

module.exports = {
  processMainOptions: processMainOptions,
  processTenant: processTenant,
  processOptionalParameters: processOptionalParameters
};

function processMainOptions(options) {
  var opts = clone(options);
  validateMainOptions(opts);
  setMainOptionsDefaults(opts);
  return opts;
}

function validateMainOptions(options) {
  if (!isObject(options)) {
    throw new Error('Options should be an object');
  }
  MANDATORY_OPTIONS.forEach(function (property) {
    if (!isNonEmptyString(options[property])) {
      throw new Error(format("Property '%s' should be a non-empty string", property));
    }
  });

  ['polling_interval_millis'].forEach(function (property) {
    validateNonNegativeInteger(options, property);
  });

  ['polling_timeout_seconds', 'cache_max_items', 'cache_item_expire_seconds'].forEach(function (property) {
    validatePositiveInteger(options, property);
  });
}

function setMainOptionsDefaults(options) {
  options['cache_max_items'] = options['cache_max_items'] || 500;
  options['cache_item_expire_seconds'] = options['cache_item_expire_seconds'] || (10 * 60);

  options['polling_interval_millis'] = isDefined(options['polling_interval_millis']) ? options['polling_interval_millis'] : 300;
  options['polling_timeout_seconds'] = options['polling_timeout_seconds'] || 120;
}

function processTenant(tenant) {
  if (typeof tenant !== 'string') {
    throw new Error('Tenant should be a string');
  }
  tenant = tenant.trim();
  if (!tenant.length) {
    throw new Error('Tenant cannot be an empty string');
  }
  return tenant;
}

function processOptionalParameters(optionalParameters) {
  if (!optionalParameters) {
    return;
  }
  if (!isPlainObject(optionalParameters)) {
    throw new Error('"optionalParameters" must be an object');
  }
  return optionalParameters;
}

function isObject(value) {
  return (typeof value === 'object' && value !== null);
}

function isPlainObject(value) {
  return isObject(value) && !Array.isArray(value);
}

function isNonEmptyString(value) {
  return (typeof value === 'string' && value.length);
}

function isDefined(value) {
  return (value !== undefined && value !== null);
}

function isNonNegativeInteger(value) {
  return (Number.isInteger(value) && value >= 0);
}

function isPositiveInteger(value) {
  return (Number.isInteger(value) && value > 0);
}

function validateNonNegativeInteger(options, property) {
  var value = options[property];
  if (isDefined(value) && !isNonNegativeInteger(value)) {
    throw new Error(format("Property '%s' should be a non-negative integer (if provided)", property));
  }
}

function validatePositiveInteger(options, property) {
  var value = options[property];
  if (isDefined(value) && !isPositiveInteger(value)) {
    throw new Error(format("Property '%s' should be a positive integer (if provided)", property));
  }
}
