'use strict';

var format = require('util').format;
var INSTANCE = require('./constants').STATUS.INSTANCE;

module.exports = Polling;

function Polling(restAdapter, intervalMillis, timeoutSeconds) {
  this._restAdapter = restAdapter;
  this._intervalMillis = intervalMillis;
  this._timeoutMillis = timeoutSeconds * 1000;
}

Polling.prototype.untilCreated = function (tenant, callback) {
  genericPolling(this, Date.now(), tenant, checkInstanceUntilCreated, callback);
};

Polling.prototype.untilDeleted = function (tenant, callback) {
  genericPolling(this, Date.now(), tenant, checkInstanceUntilDeleted, callback);
};

function genericPolling(self, startTime, tenant, fnCheckInstance, cb) {
  self._restAdapter.getInstance(tenant, function (err, instance) {
    if (err) {
      return cb(err);
    }
    var result = fnCheckInstance(instance, tenant);
    if (result.err) {
      return cb(result.err);
    }
    if (result.ok) {
      return cb(null, result.data);
    }

    if (Date.now() - startTime >= self._timeoutMillis) {
      return cb(new Error(format("Timeout: more than %d millis have passed during polling instance for tenant '%s'", self._timeoutMillis, tenant)));
    }

    setTimeout(function () {
      genericPolling(self, startTime, tenant, fnCheckInstance, cb);
    }, self._intervalMillis);
  });
}

function checkInstanceUntilCreated(instance, tenant) {
  if (!instance) {
    return error(format("No instance for tenant '%s' found while polling until instance is created", tenant));
  }
  if (instance.status === INSTANCE.CREATING) {
    return continuePolling();
  }
  if (instance.status === INSTANCE.CREATED) {
    return ok(instance);
  }
  return error(badInstanceStatusMessage(instance));
}

function checkInstanceUntilDeleted(instance) {
  if (!instance) {
    return ok();
  }
  if (instance.status === INSTANCE.DELETING) {
    return continuePolling();
  }
  return error(badInstanceStatusMessage(instance));
}

function badInstanceStatusMessage(instance) {
  var message = format("Status of instance for tenant '%s' is %s", instance.tenant_id, instance.status);
  if (instance.failed_message) {
    message += format('. Reason: %s.', instance.failed_message);
  }
  return message;
}

function error(err) {
  return { err: new Error(err) };
}

function ok(data) {
  return { ok: true, data: data };
}

function continuePolling() {
  return {};
}
