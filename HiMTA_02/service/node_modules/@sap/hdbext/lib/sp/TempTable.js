'use strict';

var format = require('util').format;
var debug = require('debug')('hdbext:sp');
var execWithPrepare = require('./utils').execWithPrepare;

module.exports = TempTable;

function TempTable(sp, paramMeta, data) {
  this._client = sp._client;
  this._procSchema = sp._schema;
  this._procName = sp._name;
  this._name = createTempTableName(this._procName, paramMeta.PARAMETER_NAME);
  this._paramMeta = paramMeta;
  this._data = data;
}

TempTable.prototype.getName = function () {
  return this._name;
};

TempTable.prototype.create = function (callback) {
  var self = this;
  this._generateCreateTableSql(function (err, sqlCreateTable) {
    if (err) {
      return callback(err);
    }

    debug(sqlCreateTable);
    self._client.exec(sqlCreateTable, function (err) {
      if (err) {
        return callback(err);
      }
      if (!self._data.length) {
        return callback();
      }

      var columnNames = extractColumnNames(self._data);
      var sqlInsertInto = generateInsertIntoSql(self._name, columnNames);
      debug(sqlInsertInto);

      var normalizedData = normalizeData(self._data, columnNames);
      execWithPrepare(self._client, sqlInsertInto, normalizedData, callback);
    });
  });
};

TempTable.prototype.drop = function () {
  var sqlDropTable = format('DROP TABLE "%s"', this._name);
  debug(sqlDropTable);
  this._client.exec(sqlDropTable, function (err) {
    if (err) {
      debug('Could not drop temp table (%s).', sqlDropTable, err);
    }
  });
};

TempTable.prototype._generateCreateTableSql = function (cb) {
  if (this._paramMeta.IS_INPLACE_TYPE === 'FALSE') {
    return cb(null, format('CREATE LOCAL TEMPORARY COLUMN TABLE "%s" LIKE "%s"."%s"',
      this._name, this._paramMeta.TABLE_TYPE_SCHEMA, this._paramMeta.TABLE_TYPE_NAME));
  }

  var self = this;
  var columnDefinitions = [];
  var sqlInplaceTableMetadata = 'SELECT COLUMN_NAME, DATA_TYPE_NAME, LENGTH, SCALE FROM SYS.PROCEDURE_PARAMETER_COLUMNS \
     WHERE SCHEMA_NAME = ? AND PROCEDURE_NAME = ? AND PARAMETER_NAME = ? ORDER BY POSITION';
  execWithPrepare(this._client, sqlInplaceTableMetadata, [this._procSchema, this._procName, this._paramMeta.PARAMETER_NAME], function (err, rs) {
    if (err) {
      return cb(err);
    }
    rs.forEach(function (row) {
      // Reference: https://help.sap.com/saphelp_hanaplatform/helpdata/en/20/d58a5f75191014b2fe92141b7df228/frameset.htm
      var str = format('"%s" %s', row.COLUMN_NAME, row.DATA_TYPE_NAME);
      switch (row.DATA_TYPE_NAME) {
      case 'DECIMAL':
        str += '(' + row.LENGTH;
        if (row.SCALE !== null) {
          str += ', ' + row.SCALE;
        }
        str += ')';
        break;
      case 'CHAR':
      case 'NCHAR':
      case 'VARCHAR':
      case 'NVARCHAR':
      case 'ALPHANUM':
      case 'BINARY':
      case 'VARBINARY':
      case 'SHORTTEXT':
        // FLOAT data type is represented as REAL or DOUBLE in the database
        str += '(' + row.LENGTH + ')';
        break;
      }
      columnDefinitions.push(str);
    });
    cb(null, format('CREATE LOCAL TEMPORARY COLUMN TABLE "%s" (%s)', self._name, columnDefinitions.join(', ')));
  });
};

function createTempTableName(procName, paramName) {
  var random = Math.floor(Math.random() * 1000) + Date.now();
  return format('#%s_%s_%d', procName, paramName, random);
}

function extractColumnNames(data) {
  var firstRow = data[0];
  return Object.keys(firstRow);
}

function generateInsertIntoSql(tableName, columnNames) {
  var listColumns = columnNames.map(function (columnName) {
    return format('"%s"', columnName);
  }).join(', ');

  var listPlaceholders = columnNames.map(function () {
    return '?';
  }).join(', ');

  return format('INSERT INTO "%s"(%s) VALUES (%s)', tableName, listColumns, listPlaceholders);
}

function normalizeData(data, columnNames) {
  return data.map(function (row) {
    return columnNames.map(function (column) {
      return row[column];
    });
  });
}
