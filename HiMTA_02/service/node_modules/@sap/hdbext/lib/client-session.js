'use strict';

var _ = require('lodash');
var async = require('async');
var util = require('util');
var constants = require('./constants');
var debug = require('debug')('hdbext:client-session');
var safeSql = require('./safe-sql');

exports.setSchema = setSchema;
exports.getSchema = getSchema;
exports.setLocale = setLocale;
exports.setIsolationLevel = setIsolationLevel;
exports.updateConnectionOptions = updateConnectionOptions;
exports.unsetSessionVariables = unsetSessionVariables;

function setSchema(client, schema, cb) {
  if (typeof schema !== 'string') {
    return cb(new Error('Schema name must be a string'));
  }
  var sql = 'SET SCHEMA ' + safeSql.identifier(schema);
  debug('Setting schema: %s', sql);
  client.exec(sql, cb);
}

function getSchema(client, cb) {
  client.exec('SELECT CURRENT_SCHEMA FROM DUMMY', function (err, rs) {
    if (err) {
      return cb(err);
    }
    return cb(null, rs[0].CURRENT_SCHEMA);
  });
}

function setLocale(client, locale, cb) {
  client._connection.getClientInfo().setProperty('LOCALE', locale);
  cb();
}

function setSessionVariable(client, key, value, cb) {
  if (_.isNil(value)) {
    return cb();
  }
  var sql = util.format('SET %s = %s', safeSql.stringLiteral(key), safeSql.stringLiteral(value));
  client.exec(sql, cb);
}

function unsetSessionVariable(client, key, cb) {
  var sql = 'UNSET ' + safeSql.stringLiteral(key);
  client.exec(sql, cb);
}

function setIsolationLevel(client, isolationLevel, cb) {
  var level = constants.isolationLevelValues[isolationLevel];
  if (typeof level !== 'string') {
    return cb(new Error('Invalid isolation level: ' + isolationLevel));
  }
  client.exec('SET TRANSACTION ISOLATION LEVEL ' + level, cb);
}

function setSessionVariables(client, vars, cb) {
  if (!vars) {
    return cb();
  }

  async.each(Object.keys(vars), function (key, callback) {
    setSessionVariable(client, key, vars[key], callback);
  }, cb);
}

function unsetSessionVariables(client, vars, cb) {
  if (!vars) {
    return cb();
  }

  async.each(Object.keys(vars), function (key, callback) {
    unsetSessionVariable(client, key, callback);
  }, cb);
}

function updateConnectionOptions(client, options, callback) {
  if (!_.isNil(options.autoCommit)) {
    client.setAutoCommit(Boolean(options.autoCommit));
  }

  async.parallel([function (cb) {
    options.schema ? setSchema(client, options.schema, cb) : cb();
  }, function (cb) {
    options.session ? setSessionVariables(client, options.session, cb) : cb();
  }, function (cb) {
    options.locale ? setLocale(client, options.locale.replace(/-/g, '_'), cb) : cb();
  }, function (cb) {
    options.isolationLevel ? setIsolationLevel(client, options.isolationLevel, cb) : cb();
  }], callback);
}

